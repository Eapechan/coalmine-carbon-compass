import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useData } from "@/contexts/DataContext";
import { useToast } from "@/hooks/use-toast";
import jsPDF from "jspdf";

const Reports = () => {
  const { emissions, carbonSinks, getTotalEmissions, getTotalCarbonSinks } = useData();
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [pdfBlob, setPdfBlob] = useState<Blob | null>(null);
  const [reportText, setReportText] = useState<string>("");
  const [aiLoading, setAiLoading] = useState(false);
  const [aiResponse, setAiResponse] = useState<string>("");

  // Calculate summary values
  const totalEmissions = getTotalEmissions();
  const totalOffsets = getTotalCarbonSinks();
  const netEmissions = totalEmissions - totalOffsets;

  // Helper for formatting numbers
  const fmt = (n: number) => n.toLocaleString(undefined, { maximumFractionDigits: 2 });

  // Generate PDF report
  const handleGeneratePDF = async () => {
    setIsGenerating(true);
    const doc = new jsPDF({ unit: "pt", format: "a4" });
    const pageWidth = doc.internal.pageSize.getWidth();
    let y = 40;

    // Add logo (SVG)
    try {
      const img = await fetch("/placeholder.svg").then(r => r.blob()).then(blob => new Promise<string>((resolve) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result as string);
        reader.readAsDataURL(blob);
      }));
      doc.addImage(img, "SVG", pageWidth / 2 - 40, y, 80, 80);
    } catch {}
    y += 100;

    // Essay-style narrative report
    doc.setFontSize(18);
    doc.setTextColor(34, 139, 34);
    doc.text("CoalMine Carbon Compass: Carbon Emission & Offset Business Report", pageWidth / 2, y, { align: "center" });
    y += 40;
    doc.setFontSize(12);
    doc.setTextColor(60, 60, 60);
    const summary =
      `This business report provides a comprehensive overview of carbon emissions and offset activities for your mining operations, as tracked by the CoalMine Carbon Compass platform. The data presented herein is based on real-time entries and calculations aligned with IPCC and Indian regulatory standards.\n\n` +
      `During the reporting period, your operations recorded a total of ${fmt(totalEmissions)} tonnes of CO₂ equivalent (CO₂e) emissions. These emissions arise from a variety of activities, including but not limited to fuel combustion, material handling, and other site-specific processes. In response, a total of ${fmt(totalOffsets)} tonnes of CO₂e have been offset through verified carbon sink initiatives, such as afforestation, land restoration, and other sustainable practices.\n\n` +
      `The resulting net emissions for this period stand at ${fmt(netEmissions)} tonnes of CO₂e. This figure reflects your organization's ongoing commitment to environmental stewardship and regulatory compliance. The balance between emissions and offsets is a key indicator of sustainability performance and is closely monitored on the platform's dashboard.\n\n` +
      `A review of recent emission entries reveals a consistent pattern of reporting across major operational categories. Similarly, carbon sink activities have been systematically documented, ensuring transparency and traceability. The dashboard comparison confirms that the reported totals align with the live data, providing confidence in the accuracy of this report.\n\n` +
      `CoalMine Carbon Compass continues to support your journey toward a lower carbon footprint by offering actionable insights, real-time tracking, and robust reporting tools. We recommend ongoing monitoring and the pursuit of additional offset opportunities to further enhance your sustainability profile.\n\n` +
      `This report is intended for internal use and strategic planning. For further details or a breakdown of specific entries, please refer to the platform or contact your sustainability officer.`;
    doc.text(summary, 50, y, { maxWidth: pageWidth - 100, lineHeightFactor: 1.5 });
    y += 220;

    // Footer
    doc.setFontSize(12);
    doc.setTextColor(120, 120, 120);
    doc.text(
      "Report generated by CoalMine Carbon Compass | Powered by Indian and IPCC standards | Confidential",
      pageWidth / 2,
      820,
      { align: "center" }
    );

    // Add placeholder signature (bottom right)
    doc.setFontSize(12);
    doc.setTextColor(60, 60, 60);
    doc.text("_________________________", pageWidth - 200, 760, { align: "left" });
    doc.text("Authorized Signatory", pageWidth - 200, 780, { align: "left" });
    doc.setFontSize(12);
    doc.setTextColor(120, 120, 120);
    doc.text("(Digitally generated)", pageWidth - 200, 795, { align: "left" });

    // Add placeholder seal (bottom left)
    doc.setDrawColor(34, 139, 34);
    doc.setLineWidth(2);
    doc.circle(100, 770, 40, 'S');
    doc.setFontSize(12);
    doc.setTextColor(34, 139, 34);
    doc.text("COALMINE", 100, 765, { align: "center" });
    doc.text("CARBON", 100, 780, { align: "center" });
    doc.text("COMPASS", 100, 795, { align: "center" });

    // Save PDF as Blob in memory
    const pdfBlob = doc.output('blob');
    setPdfBlob(pdfBlob);
    setReportText(summary);

    // Download PDF
    const url = URL.createObjectURL(pdfBlob);
    const a = document.createElement('a');
    a.href = url;
    a.download = "carbon_emission_report.pdf";
    a.click();
    URL.revokeObjectURL(url);

    setIsGenerating(false);
    toast({
      title: "Report Generated",
      description: "Your professional carbon emission report PDF has been downloaded.",
    });
  };

  // Stub for sending to Llama 3 (replace with your actual function)
  const sendToLlama3 = async (text: string) => {
    setAiLoading(true);
    setAiResponse("");
    try {
      // Replace this with your actual Llama 3 API call
      // Example: const response = await llama3ApiCall(text);
      await new Promise(res => setTimeout(res, 2000)); // Simulate delay
      setAiResponse("[AI Response: Reframed/Analyzed Report]\n" + text.slice(0, 300) + (text.length > 300 ? "..." : ""));
    } catch (err) {
      setAiResponse("Error contacting AI model.");
    } finally {
      setAiLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto py-10">
      <Card>
        <CardHeader>
          <CardTitle>Comprehensive Carbon Emission Report</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div>
            <p className="text-lg font-semibold">Summary</p>
            <ul className="list-disc ml-6 mt-2 text-gray-700">
              <li>Total Emissions: <span className="font-bold">{fmt(totalEmissions)} t CO₂e</span></li>
              <li>Total Offsets (Sinks): <span className="font-bold">{fmt(totalOffsets)} t CO₂e</span></li>
              <li>Net Emissions: <span className="font-bold">{fmt(netEmissions)} t CO₂e</span></li>
            </ul>
          </div>
          <Button onClick={handleGeneratePDF} disabled={isGenerating} className="sustainability-gradient text-white w-full">
            {isGenerating ? "Generating..." : "Download PDF Report"}
          </Button>
          <Button
            onClick={() => sendToLlama3(reportText)}
            disabled={!reportText || aiLoading}
            className="w-full mt-2 flex items-center justify-center gap-2"
            variant="outline"
          >
            {aiLoading ? (
              <>
                <svg className="animate-spin h-5 w-5 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                </svg>
                Reframing with AI...
              </>
            ) : (
              "Reframe with AI"
            )}
          </Button>
          {aiResponse && (
            <div className="mt-4 p-4 bg-gray-50 rounded border text-sm whitespace-pre-line">
              {aiResponse}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default Reports;
